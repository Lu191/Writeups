from pwn import * 
import struct
import string
import sys

context.log_level = 'error'

flag_chars =  '!' + '_' + '{' + '}' + string.ascii_uppercase + string.digits + string.ascii_lowercase 
xors = [0xde, 0xad, 0xbe, 0xef, 0xfe, 0xed, 0xca, 0xfe, 0x13, 0x37, 0xab, 0xcd, 0xef]
rands = [0x7e024fd5d1d40, 0xf7f504275ad848, 0x22cb961e49b5cc8, 0xb22dccc7d6accd, 0x4da8e52c2c4b32, 0x6951bf394b034e, 0x608576acf100f8, 0x2491e8413032161, 0x6aac195bba762b, 0x639c14b7dcc246, 0x50bcaf67f182f10, 0x1edd7a58082e, 0x6e765060d0a22a, 0x467fcdc53c191f, 0xbb57f9f3f70980, 0x428eecb83c5a515, 0x2269f1eea431fae, 0x8dd39998de0003, 0x117b84615ca624c, 0x41efb42ab7b4808, 0x3973c36b5bd72d, 0x2c661c14e2df869, 0x1b6f1752ebdc034]

payload = b''
#flag = ['a','c','t','f','{','M','0','R','3','_','C','H','3','C','K','S','U','M','S', '!', '!', '!', '}']
flag = []

count = len(flag) + 1
chars_count = 0
while True:
    while chars_count < len(flag_chars) and len(flag) < len(rands):
        p = remote("rev.2021.chall.actf.co", 21450)
        # p = remote("localhost", 21450)

        rand = p.recvn(0xd, timeout=1)
        new_c = []
        j = 0
        for c in rand:
            new_c.append(ord(c) ^ xors[j])
            j += 1
        payload = b''
        i = 0
        for ch in flag:
            payload += p64(rands[i]) + ch.encode()
            for n in new_c:
                payload += struct.pack("<Q", n)[0]
            i += 1
        if(i == count - 1):
            payload += p64(rands[i]) + flag_chars[chars_count]
            for n in new_c:
                payload += struct.pack("<Q", n)[0]
        p.send(payload)
        sys.stdout.flush()
        chr_suffix = 'st'
        if(len(flag) == 1):
            chr_suffix = 'nd'
        else:
            chr_suffix = 'th'
        if(chars_count == 0):
            sys.stdout.write("\rBruteforcing the " + str(len(flag) + 1) + chr_suffix + " character of the flag... tried so far: " + flag_chars[chars_count])
        else:
            sys.stdout.write("\r" + flag_chars[chars_count])
        res = p.recvn(5 * count, timeout=1)
        if(len(res) == 5 * count):
            print("\nFound correct character: " + flag_chars[chars_count])
            flag.append(flag_chars[chars_count])
            print("Current flag: " + "".join(flag))
            count += 1
            chars_count = 0
        else:
            chars_count += 1
        p.close()
    else:
        if(len(flag) != len(rands)):
            print("\nFinished chars list, something went wrong")
        else:
            print("Found flag: " + "".join(flag))
        break

# 1       breakpoint     keep y   0x00005555555556a3 
# 2       breakpoint     keep y   0x0000555555555709 
# 3       breakpoint     keep y   0x0000555555555931 
# 4       breakpoint     keep y   0x000055555555575a 
# 6       breakpoint     keep y   0x000055555555562a 
# 8       breakpoint     keep y   0x00005555555555c4 
# 11      breakpoint     keep y   0x00005555555552d6 
# 	breakpoint already hit 1 time
# 12      breakpoint     keep y   0x0000555555555627 
# 13      breakpoint     keep y   0x0000555555555311 
# baaaaaaaaaaaaaaaaaaaab

# byte ptr [RBP + client_bytes_rec*0x1 + -0x160]


# 0x555555555319
